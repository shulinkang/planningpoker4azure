# Build ASP.NET Core project using Azure Pipelines

parameters:
  RunEnd2EndTests: true
  PublishArtifacts: true

jobs:
- job: PlanningPokerApp
  displayName: PlanningPoker App

  pool:
    vmImage: ubuntu-latest

  workspace:
    clean: all

  variables:
    RunEnd2EndTests: ${{ parameters.RunEnd2EndTests }}
    PublishArtifacts: ${{ parameters.PublishArtifacts }}
    TestAssemblies: ''

  steps:
  - task: UseDotNet@2
    displayName: Install .NET Core SDK
    inputs:
      version: 3.1.x

  - task: NodeTool@0
    displayName: Install Node.js
    inputs:
      versionSpec: 14.x

  - pwsh: './scripts/UpdateVersion.ps1 -VersionNumber $env:BUILD_BUILDID'
    displayName: 'PowerShell UpdateVersion.ps1'
    failOnStderr: true

  - task: Npm@1
    displayName: npm install
    inputs:
      command: install
    condition: and(succeeded(), eq(variables['RunEnd2EndTests'], 'true'))

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: $(BuildProjects)
      arguments: --verbosity normal

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      projects: $(BuildProjects)
      arguments: --configuration $(BuildConfiguration) --verbosity normal

  - pwsh: |
      $testFiles = [System.Collections.Generic.List[string]]::new()
      $testPath = Join-Path -Path $env:SYSTEM_DEFAULTWORKINGDIRECTORY -ChildPath "Build\bin\$env:BUILDCONFIGURATION\netcoreapp3.1"
      Get-ChildItem -Path $testPath -Filter '*.Test.dll' | ForEach-Object { $testFiles.Add('"' + $_.FullName + '"') }
      $testAssemblies = [string]::Join(' ', $testFiles)
      Write-Host "##vso[task.setvariable variable=TestAssemblies]$testAssemblies"
    displayName: Find Test Assemblies
    failOnStderr: true

  - task: DotNetCoreCLI@2
    displayName: dotnet vstest
    inputs:
      command: custom
      custom: vstest
      arguments: $(TestAssemblies) --logger:trx;LogFileName="$(Build.BinariesDirectory)/PlanningPoker.trx"

  - pwsh: .\node_modules\.bin\selenium-standalone install
    displayName: Install Selenium
    workingDirectory: $(Build.SourcesDirectory)
    condition: and(succeeded(), eq(variables['RunEnd2EndTests'], 'true'))

  - task: DotNetCoreCLI@2
    displayName: dotnet vstest Duracellko.PlanningPoker.E2ETest
    inputs:
      command: custom
      custom: vstest
      arguments: '"$(Build.SourcesDirectory)/Build/bin/$(BuildConfiguration)/netcoreapp3.1/Duracellko.PlanningPoker.E2ETest.dll" --logger:trx;LogFileName="$(Build.BinariesDirectory)/PlanningPokerE2E.trx"'
    condition: and(succeeded(), eq(variables['RunEnd2EndTests'], 'true'))

  - task: DotNetCoreCLI@2
    displayName: dotnet publish
    inputs:
      command: publish
      publishWebProjects: false
      projects: $(BuildProjects)
      arguments: --configuration $(BuildConfiguration) --verbosity normal
    condition: and(succeeded(), eq(variables['PublishArtifacts'], 'true'))

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '*.trx'
      searchFolder: $(Build.BinariesDirectory)
      testRunTitle: Planning Poker
      configuration: $(BuildConfiguration)
      platform: $(BuildPlatform)
    condition: succeededOrFailed()

  - task: ArchiveFiles@2
    displayName: Zip web
    inputs:
      archiveType: zip
      archiveFile: $(Build.StagingDirectory)/web/web.zip
      rootFolderOrFile: $(Build.SourcesDirectory)/Build/web/$(BuildConfiguration)/netcoreapp3.1/publish
      includeRootFolder: false
      replaceExistingArchive: true
    condition: and(succeeded(), eq(variables['PublishArtifacts'], 'true'))

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: web'
    inputs:
      PathtoPublish: $(Build.StagingDirectory)/web
      ArtifactName: web
    condition: and(succeeded(), eq(variables['PublishArtifacts'], 'true'))

  - task: CopyFiles@2
    displayName: Copy screenshots
    inputs:
      SourceFolder: $(Build.SourcesDirectory)/Build/bin/$(BuildConfiguration)/netcoreapp3.1/Screenshots
      TargetFolder: $(Build.Build.StagingDirectory)/screenshots
      CleanTargetFolder: true
    condition: and(succeeded(), eq(variables['RunEnd2EndTests'], 'true'))

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: screenshots'
    inputs:
      PathtoPublish: $(Build.Build.StagingDirectory)/screenshots
      ArtifactName: screenshots
    condition: and(succeeded(), eq(variables['RunEnd2EndTests'], 'true'))
